# https://about.gitlab.com/blog/2020/12/10/basics-of-gitlab-ci-updated/

# "by starting it with a dot, it will be ignored, thus behaving like a "template"."
.on-commit-main:
  # https://how-to.dev/how-to-set-up-monorepo-build-in-gitlab-ci
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: never
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      allow_failure: false
      when: always
    - when: never

.on-create-merge-main:
  # https://how-to.dev/how-to-set-up-monorepo-build-in-gitlab-ci
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == $CI_DEFAULT_BRANCH'
      allow_failure: false
      when: always
    - when: never

.disabled:
  rules:
    - when: manual
      allow_failure: true

.disable-git-clone:
  variables:
    # Para não precisar clonar
    GIT_STRATEGY: none

# https://blog.callr.tech/building-docker-images-with-gitlab-ci-best-practices/
# https://jsramblings.com/three-ways-to-reuse-commands-across-gitlab-jobs/
.build-docker:  
  # Use this if your GitLab runner does not use socket binding
  # services:
  #   - docker:dind
  # do not use latest
  image: docker:dind

  # Valores padrão
  variables:
    BUILD_DIR: "."
    BUILD_TAG: $CI_REGISTRY/$GITLAB_USER_LOGIN/$CI_PROJECT_NAME:latest

  # Ways of authenticating manually if not supported by runner
  #before_script:
  #  - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  #before_script:
  #  - mkdir -p $HOME/.docker
  #  - echo $DOCKER_AUTH_CONFIG > $HOME/.docker/config.json
  script:
    - cd $BUILD_DIR
    - echo "Realizando o build da imagem $BUILD_TAG no diretório $BUILD_DIR"

    # fetches the latest image (not failing if image is not found)
    - docker pull $BUILD_TAG || true
    # builds the project, passing proxy variables, using OCI labels
    # notice the cache-from, which is going to use the image we just pulled locally
    # the built image is tagged locally with the commit SHA, and then pushed to 
    # the GitLab registry
    - >
      docker build
      --pull
      --cache-from $BUILD_TAG
      --label "org.opencontainers.image.title=$CI_PROJECT_TITLE"
      --label "org.opencontainers.image.url=$CI_PROJECT_URL"
      --label "org.opencontainers.image.created=$CI_JOB_STARTED_AT"
      --label "org.opencontainers.image.revision=$CI_COMMIT_SHA"
      --label "org.opencontainers.image.version=$CI_COMMIT_REF_NAME"
      --tag $BUILD_TAG
      .
    #- docker tag $TAG_COMMIT $TAG_LATEST
    #- docker push "$TAG_COMMIT"
    - docker push "$BUILD_TAG"